import java.nio.charset.StandardCharsets

/**
 * How to turn on java modules:
 *
 * 1) switch from org.beryx.runtime to org.beryx.jlink in the "plugin" block
 * 2) uncomment java modularity in the "java" block
 * 3) change jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED'] | probably must be open to app module
 * 4) rename module-info.java
 * 5) set the application main module in the "application" block
 * 6) switch from runtime block to jlink block in the end of this file
 *
 */

plugins {
    id "org.openjfx.javafxplugin" version "0.0.12"
    id 'org.beryx.runtime' version '1.12.7'
//    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.matteoveroni'
version '1.0'

ext {
    appName = 'pomodorotime'
    prettyAppName = 'PomodoroTime'
    mainName = 'Launcher'
    author = 'Matteo Veroni'
    UTF_8 = StandardCharsets.UTF_8.name()
    logbackVersion = '1.2.11'
    jupiterVersion = '5.8.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = UTF_8
compileTestJava.options.encoding = UTF_8
javadoc.options.encoding = UTF_8

wrapper {
    gradleVersion = '7.4.2'
}

//java {
//    modularity.inferModulePath.set(true)
//}

application {
//    mainModule = "${project.group}.${appName}"
    setApplicationName("$appName")
    mainClass.set("${project.group}.${appName}.${mainName}")
    run {
        jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED']
        args += '-Djdk.gtk.version=2'
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    // Logging - Sl4j, logback
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    // Formsfx
    implementation 'com.dlsc.formsfx:formsfx-core:11.5.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // Test
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

javafx {
    version = "17.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

jar {
    manifest.attributes(
            'Built-By': "${author}",
            'Created-By': System.properties['java.version']
                    + " (" + System.properties['java.vendor']
                    + " " + System.properties['java.vm.version'] + ")",
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Main-Class': "${project.group}.${appName}.${mainName}"
    )
}

test {
    useJUnitPlatform()
}

//jlink {
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    launcher {
//        name = "${prettyAppName}"
//        mainClass = "${project.group}.${appName}.${mainName}"
//        noConsole = true
//    }
//    addExtraDependencies("javafx")
//
//    targetPlatform('linux-x64') {
//        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu17.32.13-ca-jdk17.0.2-linux_x64.zip")
//    }
//
//    jpackage {
//        def currentOs = org.gradle.internal.os.OperatingSystem.current()
//        targetPlatformName = currentOs.isWindows() ? "win" : "linux-x64"
//        installerOptions += [
//                '--vendor', "${author}",
//                '--app-version', version.replace('-', '.'),
//                '--description', 'A software to set alarms',
//                '--verbose',
//        ]
//        if (currentOs.isWindows()) {
//            installerOptions += [
//                    '--win-per-user-install',
//                    '--win-dir-chooser',
//                    '--win-menu',
//                    '--win-shortcut'
//            ]
//            installerType = 'msi'
//        } else if (currentOs.isLinux()) {
//            //                    '--resource-dir', buildDir.toString() + '/jpackage/kanbango/lib',
//            installerOptions += [
//                    '--resource-dir', 'src/main/resources',
//                    '--linux-shortcut',
//                    '--linux-deb-maintainer', 'matver87@gmail.com',
//                    '--linux-rpm-license-type', 'MIT'
//            ]
//        }
//    }
//}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }
    targetPlatform('linux-x64') {
        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu17.32.13-ca-jdk17.0.2-linux_x64.zip")
    }
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()

        targetPlatformName = currentOs.isWindows() ? "win" : "linux-x64"
        installerOptions += [
                '--vendor', "${author}",
                '--app-version', version.replace('-', '.'),
                '--description', 'A software to set alarms',
                '--verbose',
        ]
        if (currentOs.isWindows()) {
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
            installerType = 'msi'
        } else if (currentOs.isLinux()) {
            //                    '--resource-dir', buildDir.toString() + '/jpackage/kanbango/lib',
            installerOptions += [
                    '--resource-dir', 'src/main/resources',
                    '--linux-shortcut',
                    '--linux-deb-maintainer', 'matver87@gmail.com',
                    '--linux-rpm-license-type', 'MIT'
            ]
        }
    }
}