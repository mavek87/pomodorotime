import java.nio.charset.StandardCharsets

/**
 * How to enable java modules:
 *
 * 1) switch from org.beryx.runtime to org.beryx.jlink in the "plugin" block
 * 2) uncomment java modularity in the "java" block
 * 3) change jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED'] | probably must be open to app module
 * 4) rename module-info.java
 * 5) set the application main module in the "application" block
 * 6) switch from runtime block to jlink block in the end of this file
 *
 */

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.runtime' version '1.12.7'
//    id 'org.beryx.jlink' version '2.25.0'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'com.matteoveroni'
version = scmVersion.version

ext {
    appName = 'pomodorotime'
    prettyAppName = 'Pomodoro-Time'
    mainName = 'Launcher'
    author = 'Matteo Veroni'
    authorEmail = 'matver87@gmail.com'
    website = 'https://github.com/mavek87/pomodorotime'
    UTF_8 = StandardCharsets.UTF_8.name()

    logbackVersion = '1.2.11'
    lombokVersion = '1.18.24'
    ikonliVersion = '12.3.1'
    jupiterVersion = '5.10.2'
    mockitoVersion = '5.11.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = UTF_8
compileTestJava.options.encoding = UTF_8
javadoc.options.encoding = UTF_8

def currentOs = org.gradle.internal.os.OperatingSystem.current()

enum Platform {
    WIN("win"), MAC("mac"), LINUX("linux")

    private final String name

    Platform(String name) {
        this.name = name
    }

    String getName() {
        return name
    }
}

def platform
if (currentOs.isWindows()) platform = Platform.WIN
else if (currentOs.isMacOsX()) platform = Platform.MAC
else if (currentOs.isLinux()) platform = Platform.LINUX
else throw new GradleException("Unknown platform")

wrapper {
    gradleVersion = '7.4.2'
}

scmVersion {
    hooks {
        pre 'fileUpdate', [file: 'src/main/resources/version.properties', pattern: { v, c -> /version=$v/ }, replacement: { v, c -> "version=$v" }]
        pre 'commit'
    }
}

java {
//    modularity.inferModulePath.set(true)
}

application {
//    mainModule = "${project.group}.${appName}"
    setApplicationName("$appName")
    mainClass.set("${project.group}.${appName}.${mainName}")
    run {
        jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED']
        args += '-Djdk.gtk.version=2'
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    // Logging - Sl4j, logback
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    // Lombok
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'
    // FormsFX
    implementation 'com.dlsc.formsfx:formsfx-core:11.5.0'
    // PreferencesFX
    implementation('com.dlsc.preferencesfx:preferencesfx-core:11.9.0') {
        exclude group: 'org.openjfx', module: 'javafx-web'
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    // Ikonli icons
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonliVersion"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonliVersion"
    implementation "org.kordamp.ikonli:ikonli-typicons-pack:$ikonliVersion"
    // Tray Icon
    // implementation 'com.dustinredmond.fxtrayicon:FXTrayIcon:3.1.2'
    // Test
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    // Mockito
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

shadowJar {
    mergeServiceFiles()
}

jar {
    manifest.attributes(
            'Built-By': "${author}",
            'Created-By': System.properties['java.version']
                    + ' (' + System.properties['java.vendor']
                    + ' ' + System.properties['java.vm.version'] + ')',
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Main-Class': "${project.group}.${appName}.${mainName}"
    )
}

test {
    useJUnitPlatform()
}

def winJDK = 'https://cdn.azul.com/zulu/bin/zulu17.34.19-ca-jdk17.0.3-win_x64.zip'
def macJDK = 'https://cdn.azul.com/zulu/bin/zulu17.34.19-ca-jdk17.0.3-macosx_x64.zip'
def linuxJDK = 'https://cdn.azul.com/zulu/bin/zulu17.34.19-ca-jdk17.0.3-linux_x64.zip'
Map<Platform, String> jdkForPlatform = Map.of(
        Platform.WIN, winJDK,
        Platform.MAC, macJDK,
        Platform.LINUX, linuxJDK
)

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = false
    }
    targetPlatform(platform.getName()) {
        jdkHome = jdkDownload(jdkForPlatform.get(platform))
    }
    jpackage {
        jvmArgs = ['-splash:$APPDIR/splash.png']

        targetPlatformName = platform.getName()
        installerOptions += [
                '--vendor', author,
                '--app-version', project.version,
                '--description', 'A software to stay focused during your daily tasks',
                '--about-url', website,
                '--verbose',
                '--copyright', "Copyright ${author}"
        ]
        if (platform == Platform.WIN) {
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
//                    '--icon', 'src/main/resources/icons/tomato.png'
            ]
            installerType = 'msi'
        } else if (platform == Platform.MAC) {
            installerOptions += [
                    // --main-jar and --main-class parameters are not compatible with --type dmg
                    // '--main-jar', "${appName}-${project.version}.jar",
                    // '--main-class', "${project.group}.${appName}.${mainName}",
                    '--mac-package-name', prettyAppName,
//                    '--install-dir', System.getProperty("user.home")
//                    '--icon', 'src/main/resources/icons/tomato.png'
            ]
            installerType = 'dmg'
//            installerType = 'pkg'
        } else if (platform == Platform.LINUX) {
            installerOptions += [
                    '--resource-dir', 'src/main/resources',
                    '--linux-shortcut',
                    '--linux-deb-maintainer', authorEmail,
                    '--linux-rpm-license-type', 'MIT',
                    '--icon', 'src/main/resources/icons/tomato.png',
//                    '--install-dir', System.getProperty("user.home"),
//                    '--linux-package-name', 'xxx'
            ]
            installerType = 'deb'
        }
    }
}

// TODO: take a look to JRealeaser project. Could be interesting... (https://github.com/jreleaser/)

//jlink {
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    launcher {
//        name = "${prettyAppName}"
//        mainClass = "${project.group}.${appName}.${mainName}"
//        noConsole = true
//    }
//    addExtraDependencies("javafx")
//
//    targetPlatform('linux-x64') {
//        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu17.32.13-ca-jdk17.0.2-linux_x64.zip")
//    }
//
//    jpackage {
//        def currentOs = org.gradle.internal.os.OperatingSystem.current()
//        targetPlatformName = currentOs.isWindows() ? "win" : "linux-x64"
//        installerOptions += [
//                '--vendor', "${author}",
//                '--app-version', version.replace('-', '.'),
//                '--description', 'A software to set alarms',
//                '--verbose',
//        ]
//        if (currentOs.isWindows()) {
//            installerOptions += [
//                    '--win-per-user-install',
//                    '--win-dir-chooser',
//                    '--win-menu',
//                    '--win-shortcut'
//            ]
//            installerType = 'msi'
//        } else if (currentOs.isLinux()) {
//            //                    '--resource-dir', buildDir.toString() + '/jpackage/kanbango/lib',
//            installerOptions += [
//                    '--resource-dir', 'src/main/resources',
//                    '--linux-shortcut',
//                    '--linux-deb-maintainer', 'matver87@gmail.com',
//                    '--linux-rpm-license-type', 'MIT'
//            ]
//        }
//    }
//}