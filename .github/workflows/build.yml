name: Build installer for supported OS
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:

  build-app:
    name: Build the application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ macos-latest, ubuntu-latest, windows-latest ]
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3

      - id: setup-java
        name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: 'gradle'

      - id: run-jpackage
        name: Run JPackage
        run: ./gradlew jpackage
        shell: bash

      - id: print-jpackage-results
        name: Print JPackage Generated Files
        run: find build/jpackage -name "*" -not -path "*/runtime" -not -path "*/runtime/*" -exec echo {} \; -exec ls -lha {} \;
        shell: bash

      - id: print-runner-os-name
        name: Print Runner OS name
        run: echo "RUNNER_OS is = $RUNNER_OS"
        shell: bash

      - id: create-distribution-folder
        name: Create Distribution Folder
        run: |
          mkdir distribution-${{ matrix.os }}
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp build/jpackage/*.msi distribution-${{ matrix.os }}
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cp build/jpackage/*.dmg distribution-${{ matrix.os }}
          elif [ "$RUNNER_OS" == "Linux" ]; then
            cp build/jpackage/*.deb distribution-${{ matrix.os }}
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash

      - id: zip-distribution-folder
        name: Zip Distribution Folder
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            7z a installer-${{ github.ref_name }}-${{ matrix.os }}.zip distribution-${{ matrix.os }}
          else
            zip -r installer-${{ github.ref_name }}-${{ matrix.os }}.zip distribution-${{ matrix.os }}
          fi
        shell: bash

      - id: upload-installer
        name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: PomodoroTime-${{ github.ref_name }}-${{ matrix.os }}
          path: ./installer-${{ github.ref_name }}-${{ matrix.os }}.zip

  release-app:
    name: Release the application
    needs: build-app
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    steps:
      - id: download-installer
        name: Download Installer
        uses: actions/download-artifact@v3
        with:
          name: PomodoroTime-${{ github.ref_name }}-${{ matrix.os }}
          path: ./

      - id: create-release
        name: Create GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.ref_name }}-${{ matrix.os }}
          release_name: release-${{ github.ref_name }}-${{ matrix.os }}
          draft: false
          prerelease: false

      - id: release-installer
        name: Release Installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: installer-${{ github.ref_name }}-${{ matrix.os }}.zip
          asset_name: installer-${{ github.ref_name }}-${{ matrix.os }}.zip
          asset_content_type: application/zip