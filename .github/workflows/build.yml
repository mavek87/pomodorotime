name: Build installer for supported OS
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:

  build-app:
    name: Build the application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ macos-latest, ubuntu-latest, windows-latest ]
#        os: [ ubuntu-latest, windows-latest ]
#        os: [ windows-latest ]

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3

      - id: setup-java
        name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: 'gradle'

      - id: build-distribution
        name: Build Distribution
        run: ./gradlew jpackage
        shell: bash

      - id: create-distribution-folder
        name: Create Distribution Folder
        run: |
          mkdir distribution-${{ matrix.os }}
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp build/jpackage/*.msi distribution-${{ matrix.os }}
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cp build/jpackage/*.dmg distribution-${{ matrix.os }}
          elif [ "$RUNNER_OS" == "Linux" ]; then
            cp build/jpackage/*.deb distribution-${{ matrix.os }}
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash
#        run: mkdir -p distribution-${{ matrix.os }} && cp -r build/jpackage/* distribution-${{ matrix.os }}

#      - id: create-distribution-folder
#        name: Create Distribution Folder
#        run: mkdir -p distribution-${{ matrix.os }} && cp -r build/jpackage/* distribution-${{ matrix.os }}
#        shell: bash

#      - id: zip-distribution-folder
#        name: Zip Distribution Folder
#        run: zip -r distribution-${{ matrix.os }}.zip distribution-${{ matrix.os }}

#      - run: mkdir test-${{ matrix.os }}
#        shell: bash
#
#      - run: cd test-${{ matrix.os }} && touch a b c && cd ..
#        shell: bash
#
#      - run: ls -R
#        shell: bash

#      - id: zip-distribution-folder
#        name: Zip Distribution Folder
#        run: zip -r test-${{ matrix.os }}.zip test-${{ matrix.os }}

      - id: zip-distribution-folder
        name: Zip Distribution Folder
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            7z a installer-${{ matrix.os }}.zip distribution-${{ matrix.os }}
          else
            zip -r installer-${{ matrix.os }}.zip distribution-${{ matrix.os }}
          fi
        shell: bash

#          - id: zip-distribution-folder
#            name: Zip Distribution Folder
#            run: |
#              if [ "$RUNNER_OS" == "Windows" ]; then
#                7z a test-${{ matrix.os }}.zip test-${{ matrix.os }}
#              else
#                zip -r test-${{ matrix.os }}.zip test-${{ matrix.os }}
#              fi
#            shell: bash

      - id: upload-installer
        name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: PomodoroTime-${{ matrix.os }}
          path: ./installer-${{ matrix.os }}.zip

#            - id: upload-installer
#                name: Upload Installer
#                uses: actions/upload-artifact@v3
#                with:
#                  name: PomodoroTime-${{ matrix.os }}.zip
#                  path: distribution-${{ matrix.os }}.zip

  release-app:
    name: Release the application
    needs: build-app
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
#        os: [ ubuntu-latest, windows-latest ]
#        os: [ windows-latest ]

    steps:
#      - id: checkout
#        name: Checkout
#        uses: actions/checkout@v3

      - id: download-installer
        name: Download Installer
        uses: actions/download-artifact@v3
        with:
          name: PomodoroTime-${{ matrix.os }}
          path: ./

      #            - id: download-installer
#              name: Download installer
#              uses: actions/download-artifact@v3
#              with:
#                name: PomodoroTime-${{ matrix.os }}.zip
#                asset_content_type: application/zip

#      - name: 'Echo download path'
#        run: echo ${{steps.download-installer.outputs.download-path}}
#        shell: bash
#
      - id: test-downloaded-installer
        name: Test Downloaded Installer
        run: ls -R
        shell: bash

      - id: create-release
        name: Create GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ matrix.os }}-${{ github.ref_name }}
          release_name: release-${{ matrix.os }}-${{ github.ref_name }}
          draft: false
          prerelease: false

      - id: release-installer
        name: Release Installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: installer-${{ matrix.os }}.zip
          asset_name: installer-${{ matrix.os }}.zip
          asset_content_type: application/zip